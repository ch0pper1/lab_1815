{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":""},{"location":"#connect-watsonx-assistant-to-your-business-data-using-custom-extensions","title":"Connect watsonx Assistant to your Business Data using Custom Extensions","text":"<p>This hands on lab is designed to show you how to create an API and document it so that it can be used by watsonx Assistant.  The lab will start by creating a custom API that provides user information when requested.  After local testing is complete, the next step will be to create an OpenAPI specification that can be read by watsonx Assistant.  Finally, the API will be connected to the Assistant and tested. These advanced techniques can be used for any situation or customization of an existing API.  At the end of the lab, users can incorporate this knowledge into their custom demonstrations, POCs, and MVPs.  General programming skills and watsonx Assistant Action skills necessary. </p> <p>We will discuss three key areas:</p> <ul> <li>Creating an API</li> <li>Building the OpenAPI Specification</li> <li>Connecting your API to watsonx Assistant</li> </ul>"},{"location":"#creating-an-api","title":"Creating an API","text":"<p>This can be anything that can provide information to your conversational AI platforrm.  From a third-party weather API to the latest LLM for generative AI capabilities.  The API can also be built in any desired programming language.</p> <p>For the purposes of this lab, we will focus on using Python and LangChain to connect to a watsonx.ai foundation model.</p>"},{"location":"#building-an-openapi-specification","title":"Building an OpenAPI Specification","text":"<p>watsonx Assistant requires OpenAPI spec version 3.0.  This lab will will cover the tools to use in order to create a valid specification that watsonx Assistant will be able to ingest.</p>"},{"location":"#connect-to-watsonx-assistant","title":"Connect to watsonx Assistant","text":"<p>Once everything is created and working, it is time to connect to watsonx Assistant to test the API by building an Action that calls the extension and displays the returned data.</p>"},{"location":"appendices/glossary/","title":"Glossary","text":"<p>A brief list of acronyms and definitions</p> Term Definition API Application Programming Interface REST REpresentational State Transfer WA watsonx Assistant JSON JavaScript Object Notation IDE Integrated Development Environment OpenAPI New standard for creating specifications that define an application programming interface YAML Yet Another Markup Language"},{"location":"appendices/helpful-links/","title":"Helpful links","text":""},{"location":"appendices/helpful-links/#useful-links-and-documentation","title":"Useful links and documentation","text":"<ul> <li>Swagger UI - Great free tool for creating API specs.</li> <li>OpenAPI v3.0 specification - Documentation for version 3.0 of the OpenAPI specification</li> <li>watsonx Assistant Custom Extension Documentation</li> </ul>"},{"location":"conclusion/conclusion/","title":"Conclusion","text":"<p>In this lab, you've embarked on a journey to harness the power of Watsonx Assistant by connecting it to your business data using custom extensions. You've gained valuable insights into advanced techniques that can be applied to various scenarios and customization needs, which can significantly enhance your conversational AI capabilities.</p> <p>Throughout this lab, you've delved into three key areas:</p> <p>Creating an API: You've learned how to craft a custom API tailored to your specific requirements. Whether it's fetching weather data from a third-party source or tapping into the latest generative AI capabilities, you now possess the skills to build APIs in the programming language of your choice. In our case, we explored creating a Python-based API that interacts with the Watsonx.ai foundation model.</p> <p>Building an OpenAPI Specification: You've become acquainted with the crucial role of OpenAPI specifications in enabling Watsonx Assistant to seamlessly integrate with your API. With an emphasis on OpenAPI spec version 3.0, you've familiarized yourself with the necessary tools and techniques for creating a valid specification that Watsonx Assistant can easily digest.</p> <p>Connecting to Watsonx Assistant: Finally, you've reached the culmination of this journey, where you've connected your API to Watsonx Assistant. By building an Action that calls the extension and displays the returned data, you've seen how the pieces of this intricate puzzle come together. This connection allows you to test your API within the Watsonx Assistant environment, ensuring that it operates as expected and provides valuable data to enhance your conversational AI experiences.</p> <p>As you wrap up this lab, remember that the knowledge and skills you've acquired here can extend beyond the confines of this exercise. You can now apply these techniques to your custom demonstrations, proof-of-concepts (POCs), and minimum viable products (MVPs). By doing so, you'll be better equipped to leverage Watsonx Assistant's capabilities to meet your specific business needs and elevate your conversational AI projects to new heights.</p> <p>So, as you move forward, keep experimenting, innovating, and exploring the endless possibilities that Watsonx Assistant and custom extensions offer. Your journey into the world of conversational AI has just begun, and the potential for transformative solutions is limitless. Happy coding!</p>"},{"location":"connect-wa/connect-wa/","title":"Lab 1815 - Connect your API to watsonx Assistant","text":"<p>An instance of watsonx Assistant has been provisioned for the purposes of this lab.  Follow these steps to create an Assistant:</p> <ol> <li>Login to the IBM Cloud and provide the user credentials for your student ID.</li> <li>Ensure that you are using the correct account.  If not, select the itzenablement64 account from the Account list in the upper right. </li> <li>You should see the watsonx Assistant Service in the Resource List.  Click on the name and then Press \"Launch Assistant\" </li> <li>You will need to create a new assistant to get started.  Provide a name and description, then answer the questions on the proceeding pages. </li> </ol> <p>From here, we can now add our extension and an action to call out to it.</p>"},{"location":"connect-wa/connect-wa/#adding-a-custom-extension","title":"Adding a Custom Extension","text":"<p>Adding the extension is done on the Integrations page of the Assistant.  In the lower left corner, select Integrations, then scroll down to the \"Build custom extension button\". </p> <p> </p> <p>From here, step through the process of adding the openapi.json file that was created earlier in this lab.  Once completed, there will be a tile on the Integrations page that will have your custom extension.  Now, you can add the server address and other information necessary by clicking on the Add + button.</p> <p></p> <p>After pressing next and moving to the Authentication page, the specifics for the API can be added.  For the purposes of this lab, no API key or authentication is necessary.  The server URL will still need to be added though.  Add this at the bottom of the screen in the Server variables section.</p> Note <p>If you are using your own API, then you may have to add the credentials in this section.  Please verify with the API provider for the necessary format.</p> <p></p>"},{"location":"connect-wa/connect-wa/#create-an-action-that-calls-the-extension","title":"Create an action that calls the extension","text":"<p>In the example specification, the API provides information about a user or creates a user with the supplied information.  To create an Action in Assistant, you will need to gather the information necessary to call the API.  </p> <p>To begin, create a new Action from scratch.  Give a few examples of how a customer would start this conversation.</p> <p>Now, you can add a step to ask for the user's name.  To do this, have the Assistant ask the question, then in Define User Response, choose Free Text as the type of input.  The next step will ask for this user's email address.  In the user response, there is a predefined regex type that will look for email patterns.</p> <p></p> <p>With a new step, we will call the custom extension.  In the bottom section \"And then...\", choose the Use an extension option to open a new window and call your extension.  Choose the custom extension added for this lab, then in the name field, select Action Step Variable and select the response for step one.  Then do the same for the email.</p> <p></p> <p>Now that the extension is called, we can check to see if it ran successfully and respond to the user.  If the extension returns information, then this data will be stored in a variable that can be presented to the end user. You can also end the Action as no further steps will be needed.</p>"},{"location":"connect-wa/connect-wa/#test-the-extension","title":"Test the extension","text":"<p>To test the Assistant and calling the extension, use the Preview button in the bottom right of the Actions section.  This tool provides many features that help test and troubleshoot both the Action and the extension.</p> <p>If there is an error when calling the extension, you can use the Inspect tool to see what was sent and received from the extension.  There are other options for checking the values of session and action variables.</p> <p></p> <p>Whenever an extension is called, there is a Ran Successfully variable that is created to ensure that the extension completed without errors.  This variable can be used as a condition for further steps to ensure using the data returned is available.</p> <p></p> <p>Once you have called the extension successfully and showed data within the Assistant chat session, you have completed this lab!</p>"},{"location":"create-api/create-api/","title":"Lab 1815 - Creating the API","text":""},{"location":"create-api/create-api/#what-you-will-need","title":"What you will need","text":"<ul> <li>Your choice of API.  This can be one of the following:<ul> <li>Python</li> <li>Node JS</li> <li>PHP</li> <li>Go</li> <li>Other*</li> </ul> </li> <li>Knowledge of REST API requests</li> <li>A text editor or Programming IDE</li> </ul> A note on programming languages <p>Any programming language that provides REST modules can be used.  The ones listed above are just the languages that can be used with IBM's Cloud Functions</p>"},{"location":"create-api/create-api/#getting-started","title":"Getting Started","text":"<p>There are several methods to create a REST API and each programming language will provide its own methodologies.  This lab will cover how to setup a basic API that will return a JSON object that can be used by watsonx Assistant for context data.  The key is to create a well defined API that can then be used to create the openapi documentation which WA will use.</p>"},{"location":"create-api/create-api/#build-the-api","title":"Build the API","text":"<p>For the purposes of this lab, the API will be built using python with the Flask module for http communication.  This module will need to be installed and then imported into the program.</p> <p>install Flask<pre><code>pip install flask\n</code></pre> This will install the necessary module files for the application to run.</p> <p>server.py<pre><code>from flask import Flask,jsonify\n</code></pre> The import command will associate the modules needed for responding to API requests and return JSON objects in the response.</p>"},{"location":"create-api/create-api/#instantiate-the-flask-application-and-add-an-endpoint","title":"Instantiate the Flask application and add an endpoint","text":"<p>Now that the necessary modules are installed and imported, it is time to create the application to serve the API. Here is the basic structure to the API application: server.py<pre><code>app = Flask(__name__)\n@app.route('/users', methods=['GET', 'POST'])\ndef test():\nreturn jsonify({ \"response\": \"yes, this worked.\" })\nif __name__ == '__main__':\napp.run(host='0.0.0.0', port=9001)\n</code></pre></p> <p>This simple application exposes a single url, or route, to return a JSON object with a response element.  From here, you can test this by running a curl command <code>curl -X GET http://localhost:9001/test</code> to ensure it is working.  The response should look like this: <pre><code>{\n\"response\": \"yes, this worked.\"\n}\n</code></pre></p> <p>Now that data can be returned via API, the next step is to document the API and test it using IBM Code Engine and watsonx Assistant.</p>"},{"location":"openapi-spec/create-spec/","title":"Lab 1815 - Creating the OpenAPI documentation","text":""},{"location":"openapi-spec/create-spec/#introduction-to-openapi","title":"Introduction to OpenAPI","text":"<p>OpenAPI is a specification that enables you to describe your API in a machine-readable format. It offers clear documentation and assists in development by generating client libraries and server stubs. OpenAPI adheres to RESTful principles and is typically used with JSON or YAML.  The specification will be written in JSON for the purposes of this lab as this is required by watsonx Assistant.  If you would prefer to write the spec in YAML, please ensure to convert it to JSON before importing it into the Assistant.  </p> Note <p>Working with YAML specifications will be outside the scope of this lab.</p>"},{"location":"openapi-spec/create-spec/#installation","title":"Installation","text":"<p>To start, ensure you have a text editor or integrated development environment (IDE) installed. You'll also need a basic understanding of JSON.  Visual Studio Code has already been installed on the virtual machine being used for this lab.</p>"},{"location":"openapi-spec/create-spec/#defining-api-information","title":"Defining API Information","text":"<p>Begin by defining general information about your API, such as its title, version, and description. This metadata helps users comprehend the API's purpose and usage.</p> <pre><code>{\n\"openapi\": \"3.0.0\",\n\"info\": {\n\"title\": \"My Awesome API\",\n\"version\": \"1.0.0\",\n\"description\": \"An API for demonstrating OpenAPI specifications.\"\n}\n}\n</code></pre>"},{"location":"openapi-spec/create-spec/#defining-paths-and-operations","title":"Defining Paths and Operations","text":"<p>Define the paths (endpoints) of your API and the operations (HTTP methods) that can be performed on them. Include request and response details, parameters, and more.</p> <pre><code>{\n\"paths\": {\n\"/users\": {\n\"get\": {\n\"summary\": \"Get a list of users\",\n\"responses\": {\n\"200\": {\n\"description\": \"Successful response\",\n\"content\": {\n\"application/json\": {\n\"example\": {\n\"users\": [\n{ \"id\": 1, \"name\": \"John Doe\" },\n{ \"id\": 2, \"name\": \"Jane Smith\" }\n]\n}\n}\n}\n}\n}\n}\n}\n}\n}\n</code></pre>"},{"location":"openapi-spec/create-spec/#handling-parameters","title":"Handling Parameters","text":"<p>Specify parameters that can be passed in the URL, query string, or request body. Parameters help customize API requests.</p> <pre><code>{\n\"paths\": {\n\"/users/{user_id}\": {\n\"parameters\": [\n{\n\"name\": \"user_id\",\n\"in\": \"path\",\n\"required\": true,\n\"schema\": {\n\"type\": \"integer\"\n},\n\"description\": \"ID of the user\"\n}\n],\n\"get\": {\n\"summary\": \"Get user by ID\",\n\"responses\": {\n\"200\": {\n\"description\": \"Successful response\",\n\"content\": {\n\"application/json\": {\n\"example\": {\n\"id\": 1,\n\"name\": \"John Doe\"\n}\n}\n}\n}\n}\n}\n}\n}\n}\n</code></pre>"},{"location":"openapi-spec/create-spec/#adding-request-bodies","title":"Adding Request Bodies","text":"<p>Describe request bodies for operations that require data to be sent in the request.</p> <pre><code>{\n\"paths\": {\n\"/users\": {\n\"post\": {\n\"summary\": \"Create a new user\",\n\"requestBody\": {\n\"required\": true,\n\"content\": {\n\"application/json\": {\n\"schema\": {\n\"type\": \"object\",\n\"properties\": {\n\"name\": { \"type\": \"string\" },\n\"email\": { \"type\": \"string\" }\n}\n}\n}\n}\n},\n\"responses\": {\n\"201\": {\n\"description\": \"User created successfully\"\n}\n}\n}\n}\n}\n}\n</code></pre>"},{"location":"openapi-spec/create-spec/#adding-responses","title":"Adding Responses","text":"<p>Define different response scenarios with corresponding HTTP status codes and content.</p> <pre><code>{\n\"paths\": {\n\"/users/{user_id}\": {\n\"get\": {\n\"summary\": \"Get user by ID\",\n\"responses\": {\n\"200\": {\n\"description\": \"Successful response\",\n\"content\": {\n\"application/json\": {\n\"example\": {\n\"id\": 1,\n\"name\": \"John Doe\"\n}\n}\n}\n},\n\"404\": {\n\"description\": \"User not found\"\n}\n}\n}\n}\n}\n}\n</code></pre>"},{"location":"openapi-spec/create-spec/#generating-documentation","title":"Generating Documentation","text":"<p>With your OpenAPI specification ready, you can generate interactive documentation using tools like Swagger UI or ReDoc.</p>"},{"location":"openapi-spec/create-spec/#conclusion","title":"Conclusion","text":"<p>Congratulations! You've learned the fundamentals of writing OpenAPI 3.0 specifications using JSON examples. For more advanced features and detailed documentation, refer to the official OpenAPI Specification.</p> <p>Practice is key. Experiment with different features and create more complex API specifications to enhance your skills.</p>"}]}